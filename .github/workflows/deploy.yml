name: Deploy GAS (pnpm)

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dev deps
        run: pnpm i --frozen-lockfile=false

      # grava tokens do clasp (seu secret CLASPRC_JSON)
      - name: Write clasp tokens
        shell: bash
        run: |
          cat > "$HOME/.clasprc.json" <<'JSON'
          ${{ secrets.CLASPRC_JSON }}
          JSON

      - name: Build (esbuild â†’ dist/)
        run: pnpm run build

      - name: Push to Apps Script
        run: pnpm exec clasp push

      - name: Read version from package.json
        id: pkg
        run: echo "VER=$(node -p 'require(\"./package.json\").version')" >> $GITHUB_OUTPUT

      # decide destino: main/tag -> PROD, develop -> STAGING
      - name: Choose deployment target
        id: target
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" || "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "DEPLOY_ID=${{ secrets.GAS_DEPLOYMENT_ID_PROD }}" >> $GITHUB_OUTPUT
            echo "CHANNEL=prod" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ID=${{ secrets.GAS_DEPLOYMENT_ID_STAGING }}" >> $GITHUB_OUTPUT
            echo "CHANNEL=staging" >> $GITHUB_OUTPUT
          fi

      - name: Create version v${{ steps.pkg.outputs.VER }}
        run: pnpm exec clasp version "v${{ steps.pkg.outputs.VER }}"

      - name: Deploy Web App (update same URL)
        run: pnpm exec clasp deploy --deploymentId "${{ steps.target.outputs.DEPLOY_ID }}" --description "v${{ steps.pkg.outputs.VER }} (${{ steps.target.outputs.CHANNEL }})"

      - name: Show deployments (debug)
        run: pnpm exec clasp deployments || true
